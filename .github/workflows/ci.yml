name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHONIOENCODING: UTF-8
  LC_ALL: en_US.utf-8
  LANG: en_US.utf-8
  # To fix an error when running Poetry on Windows
  # (https://github.com/python-poetry/poetry/issues/2629),
  # we set Poetry's cache directory to .poetry_cache in the current directory.
  # It makes it easier to later remove the virtualenv when it's broken.
  # Absolute path is necessary to avoid this issue:
  # https://github.com/python-poetry/poetry/issues/3049
  POETRY_CACHE_DIR: ${{ github.workspace }}/.poetry_cache

jobs:
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - "ubuntu-latest"
          - "macos-latest"
          - "windows-latest"
        python-version: [3.6, 3.9]

    steps:
      - uses: actions/checkout@v2
        with:
          # This is necessary so that we have the tags.
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
      - uses: psf/black@stable
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.1.8"

      - uses: mtkennerly/dunamai-action@v1
        with:
          env-var: VERSION

      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            ${{ github.workspace }}/.poetry_cache
            ${{ github.workspace }}/.venv
          key: venv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Check pyproject.toml validity
        run: poetry check --no-interaction

      - name: Set version
        # Bash shell works on all OS with env variables
        shell: bash
        run: poetry version $VERSION

      - name: Install dependencies
        if: steps.cache.cache-hit != 'true'
        shell: bash
        run: |
          poetry install -vv || { rm -rf .poetry_cache; poetry install -vv; }

      - name: Run tests
        run: |
          poetry run tox

      - name: Build Packages
        run: |
          poetry build

      - name: Artifact wheel for publishing
        uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'ubuntu-latest'}} && ${{ runner.os == '3.9'}} 
        with:
          name: python-dist
          path: dist
          retention-days: 1


  publish:
    runs-on: "ubuntu-latest"
    needs: build-test
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v2
        with:
          name: python-dist
          path: dist
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ runner.os == 'ubuntu-latest'}} && ${{ runner.os == '3.9'}} 
        with:
          user: ${{ secrets.GEMFURY_TOKEN }}
          repository_url: https://push.fury.io/fuschiacoppergoose/
          # Unknown reason the long_description check fails
          verify_metadata: false
          skip_existing: true  # Todo: disable this on tagged builds
